{"version":3,"sources":["Img/Img.css","App.css","Button/Button.css","Area/Area.css","Price/Price.css","Adress/Adress.css","Card/Card.css","Button/Button.jsx","Img/Img.jsx","Area/Area.jsx","Price/Price.jsx","Adress/Adress.jsx","Card/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","img","cont","wrap","button","area","abs","address","card","Button","_ref","text","func","react_default","a","createElement","className","styles","onClick","Img","src","pr","style","alt","defaultProps","Area","concat","Price","price","status","Adress","adress","Card","templ","images","tempNum","id","template","map","el","recurs","component","src_Img_Img","key","hasOwnProperty","children","src_Adress_Adress","src_Price_Price","src_Area_Area","App","state","cards","err","getInfoFromServer","fetch","then","res","json","data","_this","pushInfoToState","catch","setState","getTemplFromServer","pushTemplToState","temp1","temp2","temp3","this","_this2","_this$state","src_Button_Button","src_Card_Card","full_address","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bdb312b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"_1sv8s\",\"cont\":\"GCGwe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"vZZRl\",\"cont\":\"_1JO_c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"_3kYc7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"area\":\"_1WRrl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"abs\":\"_2UYTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"address\":\"_1yIeA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"EgM-j\"};","import React from 'react';\r\nimport styles from './Button.css'\r\n\r\nconst Button = ({text, func}) => {\r\n    return (\r\n        <div>\r\n            <button className={styles.button} onClick={func}>{text}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport style from './Img.css'\r\n\r\nconst Img = ({src, pr}) => {\r\n    return (\r\n      <div className={style.cont}>\r\n         <img src={src} alt='' className={style.img}/> \r\n        {pr}\r\n      </div>  \r\n    );\r\n};\r\n\r\nImg.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  pr: PropTypes.string\r\n}\r\n\r\nImg.defaultProps = {\r\n  pr: null\r\n}\r\n\r\n\r\nexport default Img;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport style from './Area.css'\r\n\r\nconst Area = ({area}) => {\r\n    return (\r\n        <p className={style.area}> {area ? `Area: ${area} кв.м` : null}</p> \r\n    );\r\n};\r\n\r\nArea.propTypes = {\r\n    area: PropTypes.number\r\n}\r\n\r\nArea.defaultProps = {\r\n    area: null\r\n}\r\n\r\nexport default Area;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport style from './Price.css'\r\n\r\nconst Price = ({price, status}) => {\r\n    return (\r\n       <p className={status? style.abs : null }>Price: {price} $.</p>\r\n    );\r\n};\r\n\r\nPrice.propTypes = {\r\n    price: PropTypes.number.isRequired,\r\n    status: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default Price;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Adress.css'\r\n\r\nconst Adress = ({adress}) => {\r\n    return (\r\n        <p className={style.address}> Adress: \"{adress}\".</p>\r\n    );\r\n};\r\n\r\nAdress.propTypes = {\r\n    adress: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Adress;","import React from 'react';\r\nimport Img from '../Img/Img.jsx'\r\nimport Area from '../Area/Area.jsx'\r\nimport Price from '../Price/Price.jsx'\r\nimport Adress from '../Adress/Adress.jsx'\r\nimport style from './Card.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Card = ({templ, adress, area, images, price, tempNum, id}) => {\r\n    const recurs = (el, status) => { return el.component === 'IMAGE' ? <Img key={id+images} src={images} status={status} pr={el.hasOwnProperty('children') ? recurs(el.children[0], el, true) : null}/> : el.component === 'ADDRESS' ? <Adress key={id+adress} adress={adress} status={status}/> : el.component === 'PRICE' ? <Price price ={price} key={id+price} status={status}/> : el.component === 'AREA' ? <Area area={area} key={id+area} status={status}/> : null\r\n    }\r\n\r\n    return (    \r\n        <div className={style.card}>\r\n\r\n        {templ[tempNum].template.map(el => recurs(el, false))}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nCard.propTypes = {\r\n  templ: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.number,\r\n      templates: PropTypes.arrayOf(PropTypes.shape({\r\n        component: PropTypes.string,\r\n        field: PropTypes.string,\r\n      }))\r\n  })),\r\n  adress: PropTypes.string.isRequired,\r\n  images: PropTypes.string.isRequired,\r\n  area: PropTypes.number,\r\n  price: PropTypes.number.isRequired,\r\n  tempNum: PropTypes.number.isRequired,\r\n  id: PropTypes.number.isRequired\r\n  }\r\n\r\nCard.defaultProps = {\r\n  area: null,\r\n}\r\n\r\n\r\nexport default Card;","import React, { Component } from 'react'\r\nimport Button from './Button/Button'\r\nimport Card from './Card/Card'\r\nimport style from './App.css'\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        cards: [],\r\n        templ: [],\r\n        err: \"\",\r\n        tempNum: 0,\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getInfoFromServer()        \r\n        this.getTemplFromServer()\r\n    }\r\n\r\n    getInfoFromServer = () => {\r\n        fetch('https://demo4452328.mockable.io/properties')\r\n        .then(res => res.json())\r\n        .then(data => this.pushInfoToState (data))\r\n        .catch(err => this.setState({err: err}))\r\n    }\r\n\r\n    getTemplFromServer = () => {\r\n        fetch('https://demo4452328.mockable.io/templates')\r\n        .then(res => res.json())\r\n        .then(data => this.pushTemplToState(data))\r\n        .catch(err => this.setState({err: err}))\r\n    }\r\n\r\n    pushInfoToState = (data) => {\r\n        // console.log(data);\r\n        this.setState({\r\n            cards: data.data,\r\n        })\r\n    }\r\n\r\n    pushTemplToState = (data) => {\r\n        this.setState({\r\n            templ: data,\r\n        })  \r\n    }\r\n\r\n    temp1 = () => {\r\n        this.setState({\r\n            tempNum: 0,\r\n        })\r\n    }\r\n\r\n    temp2 = () => {\r\n        this.setState({\r\n            tempNum: 1,\r\n        })\r\n    }\r\n\r\n    temp3 = () => {\r\n        this.setState ({\r\n            tempNum: 2\r\n          })\r\n    }\r\n\r\n\r\n\r\n  render() {\r\n      const {cards, templ, tempNum} = this.state\r\n\r\n    return (\r\n      <div className={style.wrap}>\r\n      <div className={style.cont}>\r\n        <Button text=\"Template 1\" func={this.temp1}/>\r\n        <Button text=\"Template 2\" func={this.temp2}/>\r\n        <Button text=\"Template 3\" func={this.temp3}/>  \r\n      </div>\r\n\r\n        {cards.map(el => <Card key={el.id} id={el.id} adress={el.full_address} images={el.images[0]} area={el.area} price={el.price} templ={templ} tempNum={tempNum} recurs={this.recurs}/>)}\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}